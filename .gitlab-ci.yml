stages:
  - startup
  # - lint_test
  - build_dev
  - deploy_to_dev
default:
  tags:
    - linux-docker-node18_13_0

# Utilize web identity federation to allow AWS to perform STS calls on our behalf
.aws-prep: &aws-prep
  - |
    export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" \
    $(aws sts assume-role-with-web-identity \
    --role-arn ${ROLE_ARN} \
    --role-session-name "GitLabRunner-${CI_PROJECT_ID}-${CI_PIPELINE_ID}" \
    --web-identity-token ${OIDC_TOKEN} \
    --duration-seconds 3600 \
    --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \
    --output text))

cache:
  paths:
    - node_modules/

startup:
  stage: startup
  script:
    - npm install
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_REF_NAME =~ /^feature.*$/ && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_REF_NAME =~ /^feature.*$/ && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "hotfix"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_REF_NAME =~ /^bugfix.*$/ && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_REF_NAME =~ /^hotfix.*$/ && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"'
    - if: '$CI_COMMIT_REF_NAME == "develop"'
    - if: '$CI_COMMIT_REF_NAME == "master"'
    - if: '$CI_COMMIT_REF_NAME =~ /^release.*$/'
    - if: '$CI_COMMIT_REF_NAME =~ /^hotfix.*$/'

# lint_test:
#   stage: lint_test
#   script:
#     - cp dev.env .env
#     - npm test -- --clearCache
#     - npm run eslint
#     - npm run coverage
#   rules:
#     - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_REF_NAME =~ /^feature.*$/ && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"'
#     - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_REF_NAME =~ /^feature.*$/ && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "hotfix"'
#     - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_REF_NAME =~ /^bugfix.*$/ && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"'
#     - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_REF_NAME =~ /^release.*$/ && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"'
#     - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_REF_NAME =~ /^hotfix.*$/ && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "master"'
#     - if: '$CI_COMMIT_REF_NAME =~ /^bugfix.*$/ && $CI_PIPELINE_SOURCE != "merge_request_event"'


#------------------------------------------ Deploying to dev env ---------------------------------------------------------


build_dev:
  stage: build_dev
  script:
    - cp dev.env .env
    - npm run build
    - echo "+++Build Successful+++"
  artifacts:
    paths:
      - build/
    expire_in: 1 day
  
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_REF_NAME =~ /^feature.*$/ && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_COMMIT_REF_NAME =~ /^bugfix.*$/ && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"'
    - if: '$CI_COMMIT_REF_NAME == "develop"'

deploy_to_dev:
  stage: deploy_to_dev
  needs:
    - job: build_dev
      artifacts: true
  id_tokens:
    OIDC_TOKEN:
      aud: opiesoftware-templates
  before_script:
    - ROLE_ARN=${DEV_ROLE_ARN}
    - *aws-prep
  script:
    # deploy to s3
    - aws s3 sync build s3://$DEV_TEMPLATES_MANAGEMENT_BUCKET/
    - echo "+++Upload Successful++++"

    # Creating Invalidation to Clear Cache
    - aws cloudfront create-invalidation --distribution-id $DEV_TEMPLATES_MANAGEMENT_DISTRIBUTION_ID --paths "/*"

  environment:
    name: dev

  only:
    - develop